@lazy
function nbt(syntax) {
    JMC.python(`
def nbt(syntax):
    words, word, inside = [], '', ''
    for c in syntax:
        if not inside:
            if c == ' ':
                if word: words.append(word); word = ''
            elif c in ['[', '{', '(', '\\'', '"', '@']:
                if word: words.append(word)
                word, inside = c, c if c != '@' else ' '
            else: word += c
        else:
            if (c == ']' and inside == '[') or (c == '}' and inside == '{') or (c == ')' and inside == '(') or (c == inside and inside in ['\\'', '"', ' ']):
                word += c; words.append(word); word, inside = '', ''
            else: word += c
    if word: words.append(word)

    source_type = "entity" if words[0].startswith("@") else "block" if any(x in words[0] for x in ["~", "^"]) or words[0].isnumeric() else "storage"
    source = words.pop(0) if source_type == "entity" else " ".join(words[:3]) if source_type == "block" else words.pop(0)
    if source_type == "block": del words[:3]

    path = words.pop(0)

    operation = "get"
    action = ""
    index = ""
    start = ""
    end = ""
    if "set from" in syntax:
        operation = "modify"
        action = "set from"
        del words[:2]
    elif "set string" in syntax:
        operation = "modify"
        action = "set string"
        del words[:2]
    elif "set" in syntax:
        operation = "modify"
        action = "set value"
        words.pop(0)
    elif "merge" in syntax:
        operation = "merge"
        words.pop(0)
    elif "remove" in syntax:
        operation = 'remove'
        words.pop(0)
    elif "append from" in syntax:
        operation = "modify"
        action = "append from"
        del words[:2]
    elif "append string" in syntax:
        operation = "modify"
        action = "append string"
        del words[:2]
    elif "append" in syntax:
        operation = "modify"
        action = "append value"
        words.pop(0)
    elif "prepend from" in syntax:
        operation = "modify"
        action = "prepend from"
        del words[:2]
    elif "prepend string" in syntax:
        operation = "modify"
        action = "prepend string"
        del words[:2]
    elif "prepend" in syntax:
        operation = "modify"
        action = "prepend value"
        words.pop(0)
    elif "insert from" in syntax:
        operation = "modify"
        action = "insert from"
        index = words.pop(0)
        del words[:2]
    elif "insert string" in syntax:
        operation = "modify"
        action = "insert string"
        index = words.pop(0)
        del words[:2]
    elif "insert" in syntax:
        operation = "modify"
        action = "insert value"
        index = words.pop(0)

    second_source_type = ""
    second_source = ""
    second_path = ""
    if words and action not in ["set value", "append value", "prepend value", "insert value"]:
        second_source_type = "entity" if words[0].startswith("@") else "block" if any(x in words[0] for x in ["~", "^"]) or words[0].isnumeric() else "storage"
        second_source = words.pop(0) if second_source_type == "entity" else " ".join(words[:3]) if second_source_type == "block" else words.pop(0)
        if second_source_type == "block": del words[:3]

    if words and action not in ["set value", "append value", "prepend value", "insert value"]:
        second_path = words.pop(0)

    if action in ["set string", "append string", "prepend string", "insert string"] and words:
        start = words.pop(0)
        end = words.pop(0)

    value = ""
    if action in ["set value", "append value", "prepend value", "insert value"] and words:
        value = words.pop(0)
        value += " "

    emit(f'data {operation} {source_type} {source} {path} {action} {value}{second_source_type} {second_source} {second_path} {index} {start} {end}')

nbt('$syntax')
`, "amandin:nbt_api");
}
